/* tslint:disable */
/* eslint-disable */
/**
 * Faktyczka API
 * Faktyczka API is an server side of Faktyczka extension.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CreateFactcheckDto,
  CreateFactcheckDtoFromJSON,
  CreateFactcheckDtoToJSON,
  DefaultResponseDto,
  DefaultResponseDtoFromJSON,
  DefaultResponseDtoToJSON,
  FactcheckDto,
  FactcheckDtoFromJSON,
  FactcheckDtoToJSON,
  FactcheckEventDto,
  FactcheckEventDtoFromJSON,
  FactcheckEventDtoToJSON,
  ValidationErrorDto,
  ValidationErrorDtoFromJSON,
  ValidationErrorDtoToJSON,
} from '../models';

export interface FactcheckApiCreateRequest {
  createFactcheckDto: CreateFactcheckDto;
}

export interface FactcheckApiFindByIdRequest {
  id: string;
}

export interface FactcheckApiSyncRequest {
  token?: string;
}

/**
 *
 */
export class FactcheckApi extends runtime.BaseAPI {
  /**
   * Create a new factcheck.
   */
  async createRaw(
    requestParameters: FactcheckApiCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.createFactcheckDto === null || requestParameters.createFactcheckDto === undefined) {
      throw new runtime.RequiredError(
        'createFactcheckDto',
        'Required parameter requestParameters.createFactcheckDto was null or undefined when calling create.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/factchecks`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateFactcheckDtoToJSON(requestParameters.createFactcheckDto),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new factcheck.
   */
  async create(
    requestParameters: FactcheckApiCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieve a factcheck by id.
   */
  async findByIdRaw(
    requestParameters: FactcheckApiFindByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FactcheckDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling findById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/factchecks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FactcheckDtoFromJSON(jsonValue));
  }

  /**
   * Retrieve a factcheck by id.
   */
  async findById(
    requestParameters: FactcheckApiFindByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FactcheckDto> {
    const response = await this.findByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Synchronize with server.
   * Synchronize with server.
   */
  async syncRaw(
    requestParameters: FactcheckApiSyncRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FactcheckEventDto>> {
    const queryParameters: any = {};

    if (requestParameters.token !== undefined) {
      queryParameters['token'] = requestParameters.token;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/factchecks/sync`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FactcheckEventDtoFromJSON(jsonValue));
  }

  /**
   * Synchronize with server.
   * Synchronize with server.
   */
  async sync(
    requestParameters: FactcheckApiSyncRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FactcheckEventDto> {
    const response = await this.syncRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
